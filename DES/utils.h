#ifndef _TABLE_H
#define _TABLE_H

#include <VECTOR>
#include <BITSET>
#include <cmath>
#include <fstream>
#include <sstream>
#include <cstring>
#include <cstdlib>

using namespace std;

/* 初始IP置换表 */
static int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7};

/* 逆IP置换表 */
static int Inverse_IP[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25};

/* E 扩展表 */
static int E[] = {
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 1};

/* S 盒 */
static int S[8][4][16] = {
    {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
     {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
     {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
     {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}},
    {{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
     {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
     {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
     {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}},
    {{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
     {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
     {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
     {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}},
    {{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
     {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
     {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
     {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}},
    {{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
     {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
     {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
     {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}},
    {{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
     {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
     {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
     {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}},
    {{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
     {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
     {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
     {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}},
    {{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
     {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
     {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
     {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}}};

/* P 置换表 */
static int P[] = {
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25};

/* PC-1 置换表 */
static int PC1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4};

/* PC-2 压缩置换表 */
static int PC2[] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32};

/* 左移表 */
static int LS[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};


/**
 * @msg: 将字符串转换位64位块
 * @param s: 8个字节长度的字符串    
 * @return: 64位bitset
 */
bitset<64> charsToBitset(const char s[8]) {
    bitset<64> bits;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            // 每个s[i]在bitset中是倒序存储，但s[0] ~ s[8]是按顺序存储
            bits[i * 8 + j] = ((s[i] >> j) & 1); 
        }
    }
    return bits;
}

/**
 * @msg: 从文件中读出全部字符
 * @param filePath: 文件路径 
 * @return: 文件中全部字符构成的一个字符串
 */
string readFileToString(string filePath) {
    fstream file(filePath.c_str());
    //将文件读入到ostringstream对象buffer中
    ostringstream buffer;
    char ch;
    while (buffer && file.get(ch)) {
        buffer.put(ch);
    }
    file.close();
    //返回与流对象buf关联的字符串
    return buffer.str();
}

/**
 * @msg: 将64位数据写入文件
 * @param bits: 64位bitset
 * @param filePath: 文件路径
 * @param mode: 当前的模式 0-加密， 1-解密 
 */
void writeFileToString(bitset<64> bits, string filePath, int mode) {
    fstream file;
    file.open(filePath.c_str(), ios::binary | ios::app);
    if (mode == 0) {
        file << bits.to_string();
        file.close();
    }
    else if (mode == 1) {
        file.write((char *)&bits, sizeof(bits));
        file.close();
    }
}

/**
 * @msg: 将输入内容划分成64位一组的分组
 * @param input: 输入的内容
 * @param mode: 当前的模式 
 * @return: 存有全部64位块的向量
 */
vector<bitset<64>> PKCS_IN(string input, int mode) {
    vector<bitset<64>> blocks;
    int len = input.length();
    // 加密模式，将输入内容按8个字节一组分成64位的块
    if (mode == 0) {
        int blocksNum = len / 8 + 1;
        // 对最后一块不足64位的块要补位，补上值为欠缺字节数；若未补位时恰好满足，也要补上8个0x08
        int addNum = 8 - len % 8;
        for (int i = 0; i < addNum; i++) {
            input += to_string(addNum);
        }
        // 分组, 每组64位
        for (int i = 0; i < blocksNum; i++) {
            string s = input.substr(i * 8, 8);
            bitset<64> bits = charsToBitset(s.c_str());
            blocks.push_back(bits);
        }
    }
    // 解密模式，读取二进制串，直接转换位64位的分组
    else if (mode == 1) {
        int blocksNum = len / 64;
        for (int i = 0; i < blocksNum; i++) {
            bitset<64> bits = bitset<64>(input.substr(i * 64, 64));
            blocks.push_back(bits);
        }
    }
    remove("cipher");
    return blocks;
}

/**
 * @msg: 将DES后的内容写入文件或输出到控制台
 * @param outputPath: 文件路径
 * @param mode: 当前的模式 
 */
void PKCS_OUT(string outputPath, int mode) {
    if (mode != 0) {
        string str = readFileToString(outputPath);
        int len = str.length(); // 字符串长度
        // 正确解密的情况下最后一块的最后一位必然保存有补齐字节的信息
        // 若不为数字则必然解密错误
        if (isdigit(str[len-1])) { 
            int num = str[len-1] - '0'; // 需要删除的位数
            if (num > 0 && num < len) {
                str.erase(len - num, num); // 删除DES前补齐的字节
            }
        }
        cout << "plain: " << str << endl;
    }
}

#endif // !_TABLE_H